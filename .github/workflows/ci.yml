name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.21.x, 1.22.x, 1.23.x]
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
    
    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.23.x
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.23.x
    
    - name: Build
      run: go build -v ./cmd/app
    
    - name: Build for multiple platforms
      run: |
        GOOS=linux GOARCH=amd64 go build -o breezegate-linux-amd64 ./cmd/app
        GOOS=linux GOARCH=arm64 go build -o breezegate-linux-arm64 ./cmd/app
        GOOS=darwin GOARCH=amd64 go build -o breezegate-darwin-amd64 ./cmd/app
        GOOS=darwin GOARCH=arm64 go build -o breezegate-darwin-arm64 ./cmd/app
        GOOS=windows GOARCH=amd64 go build -o breezegate-windows-amd64.exe ./cmd/app
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries
        path: |
          breezegate-*

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.23.x
    
    - name: Run Gosec Security Scanner
      uses: securego/gosec@v2.21.4
      with:
        args: '-no-fail -fmt sarif -out results.sarif ./...'
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: results.sarif
      continue-on-error: true

  docker:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: docker build -t breezegate:latest .
    
    - name: Test Docker image
      run: |
        # Test that the container can be created
        docker run --rm -d --name test-breezegate breezegate:latest || true
        # Give it a moment to start
        sleep 2
        # Check if it's running (it will fail without config, but that's expected)
        docker ps -a | grep test-breezegate || true
        # Clean up
        docker stop test-breezegate 2>/dev/null || true
        docker rm test-breezegate 2>/dev/null || true